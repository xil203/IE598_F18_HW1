from sklearn import datasets
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
#from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
from sklearn import metrics

#define what ploy_decision_regions function is(Roschaka P53)
def plot_decision_regions(X, y, classifier, test_idx=None, resolution=0.02):
    
    # setup marker generator and color map
    markers = ('s', 'x', 'o', '^', 'v')    
    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')    
    cmap = ListedColormap(colors[:len(np.unique(y))])
     
    # plot the decision surface    
    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1    
    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1    
    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution), 
                           np.arange(x2_min, x2_max, resolution))
    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)    
    Z = Z.reshape(xx1.shape)    
    plt.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)   
    plt.xlim(xx1.min(), xx1.max())   
    plt.ylim(xx2.min(), xx2.max())
  
    # plot all samples    
    for idx, cl in enumerate(np.unique(y)):        
        plt.scatter(x=X[y == cl, 0], y=X[y == cl, 1],                   
                    alpha=0.8, c=colors[idx],                   
                    marker=markers[idx], label=cl,
                    edgecolor = 'black')
       # highlight test samples    
    if test_idx:       
        X_test, y_test = X[test_idx, :], y[test_idx]
           
        plt.scatter( X_test[:, 0], X_test[:, 1], c='',                 
                       alpha=1.0, linewidths=1, marker='o',                
                       s=100, label='test set') 




iris = datasets.load_iris()
X = iris.data[:, [2,3]]#assign petal length and petal width(3rd and 4th columns) to fature matrix x
y = iris.target #assign corresponding class labels, 0,1 and 2 for three species, to vector y

X_train, X_test, y_train, y_test = train_test_split(
X,y,test_size = 0.3, random_state = 1, stratify = y)

sc = StandardScaler()
sc.fit(X_train)
X_train_std = sc.transform(X_train)
X_test_std = sc.transform(X_test)

knn = KNeighborsClassifier(n_neighbors = 3, p = 2, metric = 'minkowski')
knn.fit(X_train_std,y_train)

X_combined = np.vstack ((X_train_std, X_test_std))
y_combined = np.hstack ((y_train, y_test))

#tree = DecisionTreeClassifier(criterion = 'entropy', max_depth = 3, random_state = 0)
#tree.fit(X_train, X_test)
plot_decision_regions(X_combined, y_combined, classifier = knn, test_idx = range(105,150))
plt.xlabel('petal length [cm]')
plt.ylabel('petal width[cm]')
plt.legend(loc = 'upper left')
plt.show()

y_pred = knn.predict(X_test_std)
print(metrics.accuracy_score(y_test,y_pred))
print(metrics.classification_report(y_test,y_pred,target_names=iris.target_names))
print(metrics.confusion_matrix(y_test, y_pred))

k_range = range(1,26)
scores = []
for k in k_range:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    y_pred = knn.predict(X_test)
    scores.append(metrics.accuracy_score(y_test, y_pred))
    
print(scores)
#Observing score vector, we see that when K = 1~17, score are the same; the score slightlt dropped starting from K=18

print("My name is Xiaodong Liu")
print("My NetID is xl54")
print("I hereby certify that I have read the University policy on Academic Integrity and that I am not in violation.")

